{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/ecommerce/ecommerceMVP/apps/customer-web/app/providers.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\r\nimport { useState } from 'react';\r\n\r\n// ============================================================================\r\n// REACT QUERY CONFIGURATION\r\n// ============================================================================\r\n\r\n/**\r\n * Create a Query Client with default options\r\n * This function is called once per user session\r\n */\r\nfunction makeQueryClient() {\r\n  return new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        // ============================================================================\r\n        // QUERY DEFAULTS\r\n        // ============================================================================\r\n        \r\n        /**\r\n         * Stale time: How long data is considered fresh (5 minutes)\r\n         * Fresh data won't refetch automatically\r\n         */\r\n        staleTime: 5 * 60 * 1000, // 5 minutes\r\n        \r\n        /**\r\n         * Cache time: How long unused data stays in cache (10 minutes)\r\n         * After this, data is garbage collected\r\n         */\r\n        gcTime: 10 * 60 * 1000, // 10 minutes (formerly cacheTime)\r\n        \r\n        /**\r\n         * Retry failed requests 2 times before giving up\r\n         * With exponential backoff: 1s, 2s, 4s\r\n         */\r\n        retry: 2,\r\n        \r\n        /**\r\n         * Retry delay with exponential backoff\r\n         */\r\n        retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n        \r\n        /**\r\n         * Refetch on window focus (good for real-time updates)\r\n         * Useful when user comes back to tab\r\n         */\r\n        refetchOnWindowFocus: true,\r\n        \r\n        /**\r\n         * Don't refetch on mount if data is fresh\r\n         * Reduces unnecessary API calls\r\n         */\r\n        refetchOnMount: false,\r\n        \r\n        /**\r\n         * Refetch on network reconnect\r\n         * Ensures data is fresh after coming back online\r\n         */\r\n        refetchOnReconnect: true,\r\n      },\r\n      \r\n      mutations: {\r\n        // ============================================================================\r\n        // MUTATION DEFAULTS\r\n        // ============================================================================\r\n        \r\n        /**\r\n         * Retry mutations once on failure\r\n         * Be conservative with mutations (POST/PUT/DELETE)\r\n         */\r\n        retry: 1,\r\n        \r\n        /**\r\n         * Retry delay for mutations\r\n         */\r\n        retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 10000),\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\n// ============================================================================\r\n// BROWSER vs SERVER SETUP\r\n// ============================================================================\r\n\r\n/**\r\n * Browser: Create query client once and reuse\r\n * Server: Create new client per request (Next.js SSR)\r\n */\r\nlet browserQueryClient: QueryClient | undefined = undefined;\r\n\r\nfunction getQueryClient() {\r\n  if (typeof window === 'undefined') {\r\n    // Server: always create new client\r\n    return makeQueryClient();\r\n  } else {\r\n    // Browser: reuse existing client\r\n    if (!browserQueryClient) {\r\n      browserQueryClient = makeQueryClient();\r\n    }\r\n    return browserQueryClient;\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// PROVIDERS COMPONENT\r\n// ============================================================================\r\n\r\n/**\r\n * Providers component to wrap the entire app\r\n * Sets up React Query for data fetching\r\n * \r\n * Usage in app/layout.tsx:\r\n * <Providers>\r\n *   {children}\r\n * </Providers>\r\n */\r\nexport default function Providers({ children }: { children: React.ReactNode }) {\r\n  /**\r\n   * Use useState to ensure client is created only once per component mount\r\n   * This prevents hydration issues in Next.js 14\r\n   */\r\n  const [queryClient] = useState(() => getQueryClient());\r\n  \r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n      \r\n      {/* React Query Devtools - Only in development */}\r\n      {process.env.NODE_ENV === 'development' && (\r\n        <ReactQueryDevtools \r\n          initialIsOpen={false}\r\n          position=\"bottom\"\r\n          buttonPosition=\"bottom-right\"\r\n        />\r\n      )}\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\n// ============================================================================\r\n// USAGE EXAMPLES\r\n// ============================================================================\r\n\r\n/**\r\n * Example 1: Using in app/layout.tsx\r\n * \r\n * import Providers from './providers';\r\n * \r\n * export default function RootLayout({\r\n *   children,\r\n * }: {\r\n *   children: React.ReactNode;\r\n * }) {\r\n *   return (\r\n *     <html lang=\"id\">\r\n *       <body>\r\n *         <Providers>\r\n *           {children}\r\n *         </Providers>\r\n *       </body>\r\n *     </html>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 2: Using useQuery in a component\r\n * \r\n * import { useQuery } from '@tanstack/react-query';\r\n * import { getProducts } from '@/lib/api/products';\r\n * \r\n * function ProductList() {\r\n *   const { data, isLoading, error } = useQuery({\r\n *     queryKey: ['products'],\r\n *     queryFn: () => getProducts({ limit: 12 })\r\n *   });\r\n *   \r\n *   if (isLoading) return <div>Loading...</div>;\r\n *   if (error) return <div>Error loading products</div>;\r\n *   \r\n *   return (\r\n *     <div>\r\n *       {data?.data.map(product => (\r\n *         <ProductCard key={product.id} product={product} />\r\n *       ))}\r\n *     </div>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 3: Using useMutation for form submission\r\n * \r\n * import { useMutation, useQueryClient } from '@tanstack/react-query';\r\n * import { joinGroupSession } from '@/lib/api/products';\r\n * \r\n * function JoinGroupButton({ sessionId }) {\r\n *   const queryClient = useQueryClient();\r\n *   \r\n *   const { mutate, isPending } = useMutation({\r\n *     mutationFn: (data) => joinGroupSession(sessionId, data),\r\n *     onSuccess: () => {\r\n *       // Invalidate and refetch group session data\r\n *       queryClient.invalidateQueries({ queryKey: ['group-session', sessionId] });\r\n *       toast.success('Berhasil bergabung!');\r\n *     },\r\n *     onError: (error) => {\r\n *       toast.error('Gagal bergabung: ' + error.message);\r\n *     }\r\n *   });\r\n *   \r\n *   return (\r\n *     <button \r\n *       onClick={() => mutate({ quantity: 1 })}\r\n *       disabled={isPending}\r\n *     >\r\n *       {isPending ? 'Loading...' : 'Gabung Grup'}\r\n *     </button>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 4: Prefetching data for faster navigation\r\n * \r\n * import { useQueryClient } from '@tanstack/react-query';\r\n * import { getProductById } from '@/lib/api/products';\r\n * \r\n * function ProductCard({ product }) {\r\n *   const queryClient = useQueryClient();\r\n *   \r\n *   // Prefetch product details on hover\r\n *   const handleMouseEnter = () => {\r\n *     queryClient.prefetchQuery({\r\n *       queryKey: ['product', product.id],\r\n *       queryFn: () => getProductById(product.id)\r\n *     });\r\n *   };\r\n *   \r\n *   return (\r\n *     <div onMouseEnter={handleMouseEnter}>\r\n *       <Link href={`/products/${product.slug}`}>\r\n *         {product.name}\r\n *       </Link>\r\n *     </div>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 5: Optimistic updates for better UX\r\n * \r\n * import { useMutation, useQueryClient } from '@tanstack/react-query';\r\n * import apiClient from '@/lib/api/client';\r\n * \r\n * function LikeButton({ productId }) {\r\n *   const queryClient = useQueryClient();\r\n *   \r\n *   const { mutate } = useMutation({\r\n *     mutationFn: () => apiClient.post(`/products/${productId}/like`),\r\n *     \r\n *     // Optimistically update UI before API call completes\r\n *     onMutate: async () => {\r\n *       // Cancel outgoing refetches\r\n *       await queryClient.cancelQueries({ queryKey: ['product', productId] });\r\n *       \r\n *       // Snapshot current value\r\n *       const previousProduct = queryClient.getQueryData(['product', productId]);\r\n *       \r\n *       // Optimistically update\r\n *       queryClient.setQueryData(['product', productId], (old: any) => ({\r\n *         ...old,\r\n *         likes: (old?.likes || 0) + 1,\r\n *         isLiked: true\r\n *       }));\r\n *       \r\n *       return { previousProduct };\r\n *     },\r\n *     \r\n *     // Rollback on error\r\n *     onError: (err, variables, context) => {\r\n *       queryClient.setQueryData(\r\n *         ['product', productId],\r\n *         context?.previousProduct\r\n *       );\r\n *     },\r\n *     \r\n *     // Refetch after success/error\r\n *     onSettled: () => {\r\n *       queryClient.invalidateQueries({ queryKey: ['product', productId] });\r\n *     }\r\n *   });\r\n *   \r\n *   return <button onClick={() => mutate()}>Like</button>;\r\n * }\r\n */\r\n\r\n/**\r\n * Example 6: Dependent queries (wait for first query before second)\r\n * \r\n * import { useQuery } from '@tanstack/react-query';\r\n * import { getProductById, getActiveGroupSession } from '@/lib/api/products';\r\n * \r\n * function ProductDetail({ productId }) {\r\n *   // First query: Get product\r\n *   const { data: product } = useQuery({\r\n *     queryKey: ['product', productId],\r\n *     queryFn: () => getProductById(productId)\r\n *   });\r\n *   \r\n *   // Second query: Get active session (only runs after product is loaded)\r\n *   const { data: session } = useQuery({\r\n *     queryKey: ['group-session', productId],\r\n *     queryFn: () => getActiveGroupSession(productId),\r\n *     enabled: !!product // Only run if product exists\r\n *   });\r\n *   \r\n *   return <div>...</div>;\r\n * }\r\n */\r\n\r\n/**\r\n * Example 7: Infinite scroll with useInfiniteQuery\r\n * \r\n * import { useInfiniteQuery } from '@tanstack/react-query';\r\n * import { getProducts } from '@/lib/api/products';\r\n * \r\n * function InfiniteProductList() {\r\n *   const {\r\n *     data,\r\n *     fetchNextPage,\r\n *     hasNextPage,\r\n *     isFetchingNextPage\r\n *   } = useInfiniteQuery({\r\n *     queryKey: ['products', 'infinite'],\r\n *     queryFn: ({ pageParam = 1 }) => getProducts({ page: pageParam }),\r\n *     getNextPageParam: (lastPage) => {\r\n *       const { page, total_pages } = lastPage.pagination;\r\n *       return page < total_pages ? page + 1 : undefined;\r\n *     },\r\n *     initialPageParam: 1\r\n *   });\r\n *   \r\n *   return (\r\n *     <div>\r\n *       {data?.pages.map((page) =>\r\n *         page.data.map((product) => (\r\n *           <ProductCard key={product.id} product={product} />\r\n *         ))\r\n *       )}\r\n *       \r\n *       {hasNextPage && (\r\n *         <button onClick={() => fetchNextPage()}>\r\n *           {isFetchingNextPage ? 'Loading...' : 'Load More'}\r\n *         </button>\r\n *       )}\r\n *     </div>\r\n *   );\r\n * }\r\n */"],"names":[],"mappings":";;;;AAoIO;;AAlIP;AAAA;AACA;AACA;;;AAJA;;;;AAMA,+EAA+E;AAC/E,4BAA4B;AAC5B,+EAA+E;AAE/E;;;CAGC,GACD,SAAS;IACP,OAAO,IAAI,wQAAW,CAAC;QACrB,gBAAgB;YACd,SAAS;gBACP,+EAA+E;gBAC/E,iBAAiB;gBACjB,+EAA+E;gBAE/E;;;SAGC,GACD,WAAW,IAAI,KAAK;gBAEpB;;;SAGC,GACD,QAAQ,KAAK,KAAK;gBAElB;;;SAGC,GACD,OAAO;gBAEP;;SAEC,GACD,YAAY,CAAC,eAAiB,KAAK,GAAG,CAAC,OAAO,KAAK,cAAc;gBAEjE;;;SAGC,GACD,sBAAsB;gBAEtB;;;SAGC,GACD,gBAAgB;gBAEhB;;;SAGC,GACD,oBAAoB;YACtB;YAEA,WAAW;gBACT,+EAA+E;gBAC/E,oBAAoB;gBACpB,+EAA+E;gBAE/E;;;SAGC,GACD,OAAO;gBAEP;;SAEC,GACD,YAAY,CAAC,eAAiB,KAAK,GAAG,CAAC,OAAO,KAAK,cAAc;YACnE;QACF;IACF;AACF;AAEA,+EAA+E;AAC/E,0BAA0B;AAC1B,+EAA+E;AAE/E;;;CAGC,GACD,IAAI,qBAA8C;AAElD,SAAS;IACP;;SAGO;QACL,iCAAiC;QACjC,IAAI,CAAC,oBAAoB;YACvB,qBAAqB;QACvB;QACA,OAAO;IACT;AACF;AAee,SAAS,UAAU,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;;IAChC;;;GAGC,GACD,MAAM,CAAC,YAAY,GAAG,IAAA,wSAAQ;8BAAC,IAAM;;IAErC,qBACE,4TAAC,gTAAmB;QAAC,QAAQ;;YAC1B;YAGA,oDAAyB,+BACxB,4TAAC,iTAAkB;gBACjB,eAAe;gBACf,UAAS;gBACT,gBAAe;;;;;;;;;;;;AAKzB,EAEA,+EAA+E;CAC/E,iBAAiB;CACjB,+EAA+E;CAE/E;;;;;;;;;;;;;;;;;;;;CAoBC,IAED;;;;;;;;;;;;;;;;;;;;;;;CAuBC,IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BC,IAED;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8CC,IAED;;;;;;;;;;;;;;;;;;;;;;CAsBC,IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCC;GAnPuB;KAAA","debugId":null}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":["file:///C:/ecommerce/ecommerceMVP/apps/customer-web/lib/utils.ts"],"sourcesContent":["// lib/utils.ts\r\nimport { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\n// ============================================\r\n// FUNCTION 1: Combine CSS classes\r\n// ============================================\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n// ============================================\r\n// FUNCTION 2: Format Indonesian Rupiah\r\n// ============================================\r\nexport function formatRupiah(amount: number): string {\r\n  return new Intl.NumberFormat('id-ID', {\r\n    style: 'currency',\r\n    currency: 'IDR',\r\n    minimumFractionDigits: 0,\r\n  }).format(amount);\r\n}\r\n\r\n// ============================================\r\n// FUNCTION 3: Format countdown timer\r\n// ============================================\r\nexport function formatTimeRemaining(seconds: number): string {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const secs = seconds % 60;\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}j ${minutes}m`;  // j = jam (hours)\r\n  }\r\n  if (minutes > 0) {\r\n    return `${minutes}m ${secs}d`;   // d = detik (seconds)\r\n  }\r\n  return `${secs}d`;\r\n}\r\n\r\n// ============================================\r\n// FUNCTION 4: Format dates in Indonesian\r\n// ============================================\r\nexport function formatIndonesianDate(date: Date): string {\r\n  return new Intl.DateTimeFormat('id-ID', {\r\n    dateStyle: 'long',\r\n  }).format(date);\r\n}"],"names":[],"mappings":"AAAA,eAAe;;;;;;;;;;;AACf;AACA;;;AAKO,SAAS;IAAG,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,SAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,OAAH,QAAA,SAAA,CAAA,KAAuB;;IACxC,OAAO,IAAA,uOAAO,EAAC,IAAA,iMAAI,EAAC;AACtB;AAKO,SAAS,aAAa,MAAc;IACzC,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,OAAO;QACP,UAAU;QACV,uBAAuB;IACzB,GAAG,MAAM,CAAC;AACZ;AAKO,SAAS,oBAAoB,OAAe;IACjD,MAAM,QAAQ,KAAK,KAAK,CAAC,UAAU;IACnC,MAAM,UAAU,KAAK,KAAK,CAAC,AAAC,UAAU,OAAQ;IAC9C,MAAM,OAAO,UAAU;IAEvB,IAAI,QAAQ,GAAG;QACb,OAAO,AAAC,GAAY,OAAV,OAAM,MAAY,OAAR,SAAQ,MAAK,kBAAkB;IACrD;IACA,IAAI,UAAU,GAAG;QACf,OAAO,AAAC,GAAc,OAAZ,SAAQ,MAAS,OAAL,MAAK,MAAM,sBAAsB;IACzD;IACA,OAAO,AAAC,GAAO,OAAL,MAAK;AACjB;AAKO,SAAS,qBAAqB,IAAU;IAC7C,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;QACtC,WAAW;IACb,GAAG,MAAM,CAAC;AACZ","debugId":null}},
    {"offset": {"line": 393, "column": 0}, "map": {"version":3,"sources":["file:///C:/ecommerce/ecommerceMVP/apps/customer-web/components/layout/mobile-bottom-nav.tsx"],"sourcesContent":["'use client';\r\n\r\nimport Link from 'next/link';\r\nimport { usePathname } from 'next/navigation';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// ============================================================================\r\n// MOBILE BOTTOM NAVIGATION - Pinduoduo style\r\n// ============================================================================\r\n\r\nexport function MobileBottomNav() {\r\n  const pathname = usePathname();\r\n\r\n  const navItems = [\r\n    {\r\n      href: '/',\r\n      label: '首页',\r\n      icon: (active: boolean) => (\r\n        <svg\r\n          className={cn('w-6 h-6', active ? 'text-red-500' : 'text-gray-600')}\r\n          fill={active ? 'currentColor' : 'none'}\r\n          stroke={active ? 'none' : 'currentColor'}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      href: '/group-buying',\r\n      label: '团购',\r\n      badge: 'HOT',\r\n      icon: (active: boolean) => (\r\n        <svg\r\n          className={cn('w-6 h-6', active ? 'text-red-500' : 'text-gray-600')}\r\n          fill={active ? 'currentColor' : 'none'}\r\n          stroke={active ? 'none' : 'currentColor'}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      href: '/orders',\r\n      label: '订单',\r\n      icon: (active: boolean) => (\r\n        <svg\r\n          className={cn('w-6 h-6', active ? 'text-red-500' : 'text-gray-600')}\r\n          fill={active ? 'currentColor' : 'none'}\r\n          stroke={active ? 'none' : 'currentColor'}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      href: '/profile',\r\n      label: '我的',\r\n      icon: (active: boolean) => (\r\n        <svg\r\n          className={cn('w-6 h-6', active ? 'text-red-500' : 'text-gray-600')}\r\n          fill={active ? 'currentColor' : 'none'}\r\n          stroke={active ? 'none' : 'currentColor'}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <nav className=\"fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 safe-area-pb\">\r\n      <div className=\"flex items-center justify-around h-16\">\r\n        {navItems.map((item) => {\r\n          const isActive = pathname === item.href;\r\n          \r\n          return (\r\n            <Link\r\n              key={item.href}\r\n              href={item.href}\r\n              className=\"flex flex-col items-center justify-center flex-1 h-full relative\"\r\n            >\r\n              {/* Badge */}\r\n              {item.badge && (\r\n                <span className=\"absolute top-1 right-1/4 bg-red-500 text-white text-[10px] font-bold px-1.5 py-0.5 rounded-full\">\r\n                  {item.badge}\r\n                </span>\r\n              )}\r\n              \r\n              {/* Icon */}\r\n              <div className=\"mb-0.5\">\r\n                {item.icon(isActive)}\r\n              </div>\r\n              \r\n              {/* Label */}\r\n              <span\r\n                className={cn(\r\n                  'text-xs font-medium',\r\n                  isActive ? 'text-red-500' : 'text-gray-600'\r\n                )}\r\n              >\r\n                {item.label}\r\n              </span>\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// Add safe area padding for iOS devices\r\nconst styles = `\r\n.safe-area-pb {\r\n  padding-bottom: env(safe-area-inset-bottom);\r\n}\r\n`;\r\n\r\nif (typeof document !== 'undefined') {\r\n  const styleSheet = document.createElement('style');\r\n  styleSheet.textContent = styles;\r\n  document.head.appendChild(styleSheet);\r\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;;;AAJA;;;;AAUO,SAAS;;IACd,MAAM,WAAW,IAAA,mRAAW;IAE5B,MAAM,WAAW;QACf;YACE,MAAM;YACN,OAAO;YACP,MAAM,CAAC,uBACL,4TAAC;oBACC,WAAW,IAAA,gJAAE,EAAC,WAAW,SAAS,iBAAiB;oBACnD,MAAM,SAAS,iBAAiB;oBAChC,QAAQ,SAAS,SAAS;oBAC1B,SAAQ;8BAER,cAAA,4TAAC;wBACC,eAAc;wBACd,gBAAe;wBACf,aAAa;wBACb,GAAE;;;;;;;;;;;QAIV;QACA;YACE,MAAM;YACN,OAAO;YACP,OAAO;YACP,MAAM,CAAC,uBACL,4TAAC;oBACC,WAAW,IAAA,gJAAE,EAAC,WAAW,SAAS,iBAAiB;oBACnD,MAAM,SAAS,iBAAiB;oBAChC,QAAQ,SAAS,SAAS;oBAC1B,SAAQ;8BAER,cAAA,4TAAC;wBACC,eAAc;wBACd,gBAAe;wBACf,aAAa;wBACb,GAAE;;;;;;;;;;;QAIV;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM,CAAC,uBACL,4TAAC;oBACC,WAAW,IAAA,gJAAE,EAAC,WAAW,SAAS,iBAAiB;oBACnD,MAAM,SAAS,iBAAiB;oBAChC,QAAQ,SAAS,SAAS;oBAC1B,SAAQ;8BAER,cAAA,4TAAC;wBACC,eAAc;wBACd,gBAAe;wBACf,aAAa;wBACb,GAAE;;;;;;;;;;;QAIV;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM,CAAC,uBACL,4TAAC;oBACC,WAAW,IAAA,gJAAE,EAAC,WAAW,SAAS,iBAAiB;oBACnD,MAAM,SAAS,iBAAiB;oBAChC,QAAQ,SAAS,SAAS;oBAC1B,SAAQ;8BAER,cAAA,4TAAC;wBACC,eAAc;wBACd,gBAAe;wBACf,aAAa;wBACb,GAAE;;;;;;;;;;;QAIV;KACD;IAED,qBACE,4TAAC;QAAI,WAAU;kBACb,cAAA,4TAAC;YAAI,WAAU;sBACZ,SAAS,GAAG,CAAC,CAAC;gBACb,MAAM,WAAW,aAAa,KAAK,IAAI;gBAEvC,qBACE,4TAAC,ySAAI;oBAEH,MAAM,KAAK,IAAI;oBACf,WAAU;;wBAGT,KAAK,KAAK,kBACT,4TAAC;4BAAK,WAAU;sCACb,KAAK,KAAK;;;;;;sCAKf,4TAAC;4BAAI,WAAU;sCACZ,KAAK,IAAI,CAAC;;;;;;sCAIb,4TAAC;4BACC,WAAW,IAAA,gJAAE,EACX,uBACA,WAAW,iBAAiB;sCAG7B,KAAK,KAAK;;;;;;;mBAvBR,KAAK,IAAI;;;;;YA2BpB;;;;;;;;;;;AAIR;GA1HgB;;QACG,mRAAW;;;KADd;AA4HhB,wCAAwC;AACxC,MAAM,SAAU;AAMhB,IAAI,OAAO,aAAa,aAAa;IACnC,MAAM,aAAa,SAAS,aAAa,CAAC;IAC1C,WAAW,WAAW,GAAG;IACzB,SAAS,IAAI,CAAC,WAAW,CAAC;AAC5B","debugId":null}}]
}