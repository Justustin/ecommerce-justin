{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///C:/ecommerce/ecommerceMVP/apps/customer-web/app/providers.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\r\nimport { useState } from 'react';\r\n\r\n// ============================================================================\r\n// REACT QUERY CONFIGURATION\r\n// ============================================================================\r\n\r\n/**\r\n * Create a Query Client with default options\r\n * This function is called once per user session\r\n */\r\nfunction makeQueryClient() {\r\n  return new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        // ============================================================================\r\n        // QUERY DEFAULTS\r\n        // ============================================================================\r\n        \r\n        /**\r\n         * Stale time: How long data is considered fresh (5 minutes)\r\n         * Fresh data won't refetch automatically\r\n         */\r\n        staleTime: 5 * 60 * 1000, // 5 minutes\r\n        \r\n        /**\r\n         * Cache time: How long unused data stays in cache (10 minutes)\r\n         * After this, data is garbage collected\r\n         */\r\n        gcTime: 10 * 60 * 1000, // 10 minutes (formerly cacheTime)\r\n        \r\n        /**\r\n         * Retry failed requests 2 times before giving up\r\n         * With exponential backoff: 1s, 2s, 4s\r\n         */\r\n        retry: 2,\r\n        \r\n        /**\r\n         * Retry delay with exponential backoff\r\n         */\r\n        retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n        \r\n        /**\r\n         * Refetch on window focus (good for real-time updates)\r\n         * Useful when user comes back to tab\r\n         */\r\n        refetchOnWindowFocus: true,\r\n        \r\n        /**\r\n         * Don't refetch on mount if data is fresh\r\n         * Reduces unnecessary API calls\r\n         */\r\n        refetchOnMount: false,\r\n        \r\n        /**\r\n         * Refetch on network reconnect\r\n         * Ensures data is fresh after coming back online\r\n         */\r\n        refetchOnReconnect: true,\r\n      },\r\n      \r\n      mutations: {\r\n        // ============================================================================\r\n        // MUTATION DEFAULTS\r\n        // ============================================================================\r\n        \r\n        /**\r\n         * Retry mutations once on failure\r\n         * Be conservative with mutations (POST/PUT/DELETE)\r\n         */\r\n        retry: 1,\r\n        \r\n        /**\r\n         * Retry delay for mutations\r\n         */\r\n        retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 10000),\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\n// ============================================================================\r\n// BROWSER vs SERVER SETUP\r\n// ============================================================================\r\n\r\n/**\r\n * Browser: Create query client once and reuse\r\n * Server: Create new client per request (Next.js SSR)\r\n */\r\nlet browserQueryClient: QueryClient | undefined = undefined;\r\n\r\nfunction getQueryClient() {\r\n  if (typeof window === 'undefined') {\r\n    // Server: always create new client\r\n    return makeQueryClient();\r\n  } else {\r\n    // Browser: reuse existing client\r\n    if (!browserQueryClient) {\r\n      browserQueryClient = makeQueryClient();\r\n    }\r\n    return browserQueryClient;\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// PROVIDERS COMPONENT\r\n// ============================================================================\r\n\r\n/**\r\n * Providers component to wrap the entire app\r\n * Sets up React Query for data fetching\r\n * \r\n * Usage in app/layout.tsx:\r\n * <Providers>\r\n *   {children}\r\n * </Providers>\r\n */\r\nexport default function Providers({ children }: { children: React.ReactNode }) {\r\n  /**\r\n   * Use useState to ensure client is created only once per component mount\r\n   * This prevents hydration issues in Next.js 14\r\n   */\r\n  const [queryClient] = useState(() => getQueryClient());\r\n  \r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n      \r\n      {/* React Query Devtools - Only in development */}\r\n      {process.env.NODE_ENV === 'development' && (\r\n        <ReactQueryDevtools \r\n          initialIsOpen={false}\r\n          position=\"bottom\"\r\n          buttonPosition=\"bottom-right\"\r\n        />\r\n      )}\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n\r\n// ============================================================================\r\n// USAGE EXAMPLES\r\n// ============================================================================\r\n\r\n/**\r\n * Example 1: Using in app/layout.tsx\r\n * \r\n * import Providers from './providers';\r\n * \r\n * export default function RootLayout({\r\n *   children,\r\n * }: {\r\n *   children: React.ReactNode;\r\n * }) {\r\n *   return (\r\n *     <html lang=\"id\">\r\n *       <body>\r\n *         <Providers>\r\n *           {children}\r\n *         </Providers>\r\n *       </body>\r\n *     </html>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 2: Using useQuery in a component\r\n * \r\n * import { useQuery } from '@tanstack/react-query';\r\n * import { getProducts } from '@/lib/api/products';\r\n * \r\n * function ProductList() {\r\n *   const { data, isLoading, error } = useQuery({\r\n *     queryKey: ['products'],\r\n *     queryFn: () => getProducts({ limit: 12 })\r\n *   });\r\n *   \r\n *   if (isLoading) return <div>Loading...</div>;\r\n *   if (error) return <div>Error loading products</div>;\r\n *   \r\n *   return (\r\n *     <div>\r\n *       {data?.data.map(product => (\r\n *         <ProductCard key={product.id} product={product} />\r\n *       ))}\r\n *     </div>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 3: Using useMutation for form submission\r\n * \r\n * import { useMutation, useQueryClient } from '@tanstack/react-query';\r\n * import { joinGroupSession } from '@/lib/api/products';\r\n * \r\n * function JoinGroupButton({ sessionId }) {\r\n *   const queryClient = useQueryClient();\r\n *   \r\n *   const { mutate, isPending } = useMutation({\r\n *     mutationFn: (data) => joinGroupSession(sessionId, data),\r\n *     onSuccess: () => {\r\n *       // Invalidate and refetch group session data\r\n *       queryClient.invalidateQueries({ queryKey: ['group-session', sessionId] });\r\n *       toast.success('Berhasil bergabung!');\r\n *     },\r\n *     onError: (error) => {\r\n *       toast.error('Gagal bergabung: ' + error.message);\r\n *     }\r\n *   });\r\n *   \r\n *   return (\r\n *     <button \r\n *       onClick={() => mutate({ quantity: 1 })}\r\n *       disabled={isPending}\r\n *     >\r\n *       {isPending ? 'Loading...' : 'Gabung Grup'}\r\n *     </button>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 4: Prefetching data for faster navigation\r\n * \r\n * import { useQueryClient } from '@tanstack/react-query';\r\n * import { getProductById } from '@/lib/api/products';\r\n * \r\n * function ProductCard({ product }) {\r\n *   const queryClient = useQueryClient();\r\n *   \r\n *   // Prefetch product details on hover\r\n *   const handleMouseEnter = () => {\r\n *     queryClient.prefetchQuery({\r\n *       queryKey: ['product', product.id],\r\n *       queryFn: () => getProductById(product.id)\r\n *     });\r\n *   };\r\n *   \r\n *   return (\r\n *     <div onMouseEnter={handleMouseEnter}>\r\n *       <Link href={`/products/${product.slug}`}>\r\n *         {product.name}\r\n *       </Link>\r\n *     </div>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 5: Optimistic updates for better UX\r\n * \r\n * import { useMutation, useQueryClient } from '@tanstack/react-query';\r\n * import apiClient from '@/lib/api/client';\r\n * \r\n * function LikeButton({ productId }) {\r\n *   const queryClient = useQueryClient();\r\n *   \r\n *   const { mutate } = useMutation({\r\n *     mutationFn: () => apiClient.post(`/products/${productId}/like`),\r\n *     \r\n *     // Optimistically update UI before API call completes\r\n *     onMutate: async () => {\r\n *       // Cancel outgoing refetches\r\n *       await queryClient.cancelQueries({ queryKey: ['product', productId] });\r\n *       \r\n *       // Snapshot current value\r\n *       const previousProduct = queryClient.getQueryData(['product', productId]);\r\n *       \r\n *       // Optimistically update\r\n *       queryClient.setQueryData(['product', productId], (old: any) => ({\r\n *         ...old,\r\n *         likes: (old?.likes || 0) + 1,\r\n *         isLiked: true\r\n *       }));\r\n *       \r\n *       return { previousProduct };\r\n *     },\r\n *     \r\n *     // Rollback on error\r\n *     onError: (err, variables, context) => {\r\n *       queryClient.setQueryData(\r\n *         ['product', productId],\r\n *         context?.previousProduct\r\n *       );\r\n *     },\r\n *     \r\n *     // Refetch after success/error\r\n *     onSettled: () => {\r\n *       queryClient.invalidateQueries({ queryKey: ['product', productId] });\r\n *     }\r\n *   });\r\n *   \r\n *   return <button onClick={() => mutate()}>Like</button>;\r\n * }\r\n */\r\n\r\n/**\r\n * Example 6: Dependent queries (wait for first query before second)\r\n * \r\n * import { useQuery } from '@tanstack/react-query';\r\n * import { getProductById, getActiveGroupSession } from '@/lib/api/products';\r\n * \r\n * function ProductDetail({ productId }) {\r\n *   // First query: Get product\r\n *   const { data: product } = useQuery({\r\n *     queryKey: ['product', productId],\r\n *     queryFn: () => getProductById(productId)\r\n *   });\r\n *   \r\n *   // Second query: Get active session (only runs after product is loaded)\r\n *   const { data: session } = useQuery({\r\n *     queryKey: ['group-session', productId],\r\n *     queryFn: () => getActiveGroupSession(productId),\r\n *     enabled: !!product // Only run if product exists\r\n *   });\r\n *   \r\n *   return <div>...</div>;\r\n * }\r\n */\r\n\r\n/**\r\n * Example 7: Infinite scroll with useInfiniteQuery\r\n * \r\n * import { useInfiniteQuery } from '@tanstack/react-query';\r\n * import { getProducts } from '@/lib/api/products';\r\n * \r\n * function InfiniteProductList() {\r\n *   const {\r\n *     data,\r\n *     fetchNextPage,\r\n *     hasNextPage,\r\n *     isFetchingNextPage\r\n *   } = useInfiniteQuery({\r\n *     queryKey: ['products', 'infinite'],\r\n *     queryFn: ({ pageParam = 1 }) => getProducts({ page: pageParam }),\r\n *     getNextPageParam: (lastPage) => {\r\n *       const { page, total_pages } = lastPage.pagination;\r\n *       return page < total_pages ? page + 1 : undefined;\r\n *     },\r\n *     initialPageParam: 1\r\n *   });\r\n *   \r\n *   return (\r\n *     <div>\r\n *       {data?.pages.map((page) =>\r\n *         page.data.map((product) => (\r\n *           <ProductCard key={product.id} product={product} />\r\n *         ))\r\n *       )}\r\n *       \r\n *       {hasNextPage && (\r\n *         <button onClick={() => fetchNextPage()}>\r\n *           {isFetchingNextPage ? 'Loading...' : 'Load More'}\r\n *         </button>\r\n *       )}\r\n *     </div>\r\n *   );\r\n * }\r\n */"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;AACA;AAJA;;;;;AAMA,+EAA+E;AAC/E,4BAA4B;AAC5B,+EAA+E;AAE/E;;;CAGC,GACD,SAAS;IACP,OAAO,IAAI,qQAAW,CAAC;QACrB,gBAAgB;YACd,SAAS;gBACP,+EAA+E;gBAC/E,iBAAiB;gBACjB,+EAA+E;gBAE/E;;;SAGC,GACD,WAAW,IAAI,KAAK;gBAEpB;;;SAGC,GACD,QAAQ,KAAK,KAAK;gBAElB;;;SAGC,GACD,OAAO;gBAEP;;SAEC,GACD,YAAY,CAAC,eAAiB,KAAK,GAAG,CAAC,OAAO,KAAK,cAAc;gBAEjE;;;SAGC,GACD,sBAAsB;gBAEtB;;;SAGC,GACD,gBAAgB;gBAEhB;;;SAGC,GACD,oBAAoB;YACtB;YAEA,WAAW;gBACT,+EAA+E;gBAC/E,oBAAoB;gBACpB,+EAA+E;gBAE/E;;;SAGC,GACD,OAAO;gBAEP;;SAEC,GACD,YAAY,CAAC,eAAiB,KAAK,GAAG,CAAC,OAAO,KAAK,cAAc;YACnE;QACF;IACF;AACF;AAEA,+EAA+E;AAC/E,0BAA0B;AAC1B,+EAA+E;AAE/E;;;CAGC,GACD,IAAI,qBAA8C;AAElD,SAAS;IACP,wCAAmC;QACjC,mCAAmC;QACnC,OAAO;IACT;;AAOF;AAee,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E;;;GAGC,GACD,MAAM,CAAC,YAAY,GAAG,IAAA,gVAAQ,EAAC,IAAM;IAErC,qBACE,6WAAC,6SAAmB;QAAC,QAAQ;;YAC1B;YAGA,oDAAyB,+BACxB,6WAAC,8SAAkB;gBACjB,eAAe;gBACf,UAAS;gBACT,gBAAe;;;;;;;;;;;;AAKzB,EAEA,+EAA+E;CAC/E,iBAAiB;CACjB,+EAA+E;CAE/E;;;;;;;;;;;;;;;;;;;;CAoBC,IAED;;;;;;;;;;;;;;;;;;;;;;;CAuBC,IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BC,IAED;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8CC,IAED;;;;;;;;;;;;;;;;;;;;;;CAsBC,IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCC","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///C:/ecommerce/ecommerceMVP/apps/customer-web/lib/store/cart.store.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist, createJSONStorage } from 'zustand/middleware';\r\nimport type { CartItem, Product, ProductVariant, GroupBuyingSession } from '@/types';\r\n\r\n// ============================================================================\r\n// CART STORE STATE INTERFACE\r\n// ============================================================================\r\n\r\ninterface CartState {\r\n  // State\r\n  items: CartItem[];\r\n  \r\n  // Actions\r\n  addItem: (\r\n    product: Product,\r\n    quantity: number,\r\n    variant?: ProductVariant,\r\n    groupSession?: GroupBuyingSession\r\n  ) => void;\r\n  removeItem: (productId: string, variantId?: string) => void;\r\n  updateQuantity: (productId: string, quantity: number, variantId?: string) => void;\r\n  clearCart: () => void;\r\n  \r\n  // Computed getters\r\n  getTotalItems: () => number;\r\n  getSubtotal: () => number;\r\n  getItemCount: (productId: string, variantId?: string) => number;\r\n  hasItem: (productId: string, variantId?: string) => boolean;\r\n}\r\n\r\n// ============================================================================\r\n// HELPER FUNCTIONS\r\n// ============================================================================\r\n\r\n/**\r\n * Generate unique key for cart item\r\n * Includes variant to allow same product with different variants\r\n */\r\nconst getItemKey = (productId: string, variantId?: string): string => {\r\n  return variantId ? `${productId}-${variantId}` : productId;\r\n};\r\n\r\n/**\r\n * Calculate price for a cart item\r\n * Considers variant price adjustments\r\n */\r\nconst getItemPrice = (product: Product, variant?: ProductVariant): number => {\r\n  const basePrice = product.base_price;\r\n  const adjustment = variant?.price_adjustment || 0;\r\n  return basePrice + adjustment;\r\n};\r\n\r\n// ============================================================================\r\n// CREATE CART STORE\r\n// ============================================================================\r\n\r\n/**\r\n * Zustand store for shopping cart management\r\n * \r\n * Features:\r\n * - Persists to localStorage automatically\r\n * - Tracks products, variants, quantities\r\n * - Associates items with group buying sessions\r\n * - Calculates totals\r\n * - Prevents duplicate items (updates quantity instead)\r\n * \r\n * Storage key: 'cart-storage'\r\n */\r\nexport const useCartStore = create<CartState>()(\r\n  persist(\r\n    (set, get) => ({\r\n      // ============================================================================\r\n      // INITIAL STATE\r\n      // ============================================================================\r\n      \r\n      items: [],\r\n      \r\n      // ============================================================================\r\n      // ACTIONS\r\n      // ============================================================================\r\n      \r\n      /**\r\n       * Add item to cart\r\n       * If item already exists, increases quantity\r\n       * \r\n       * @param product - Product to add\r\n       * @param quantity - Quantity to add (default: 1)\r\n       * @param variant - Product variant (optional)\r\n       * @param groupSession - Group buying session (optional)\r\n       */\r\n      addItem: (product, quantity, variant, groupSession) => {\r\n        const items = get().items;\r\n        const itemKey = getItemKey(product.id, variant?.id);\r\n        \r\n        // Check if item already exists in cart\r\n        const existingItemIndex = items.findIndex((item) => {\r\n          const existingKey = getItemKey(item.product.id, item.variant?.id);\r\n          return existingKey === itemKey;\r\n        });\r\n        \r\n        if (existingItemIndex !== -1) {\r\n          // Item exists, update quantity\r\n          const updatedItems = [...items];\r\n          updatedItems[existingItemIndex] = {\r\n            ...updatedItems[existingItemIndex],\r\n            quantity: updatedItems[existingItemIndex].quantity + quantity,\r\n          };\r\n          \r\n          set({ items: updatedItems });\r\n        } else {\r\n          // New item, add to cart\r\n          const newItem: CartItem = {\r\n            product,\r\n            variant,\r\n            quantity,\r\n            group_session: groupSession,\r\n          };\r\n          \r\n          set({ items: [...items, newItem] });\r\n        }\r\n      },\r\n      \r\n      /**\r\n       * Remove item from cart completely\r\n       * \r\n       * @param productId - Product ID to remove\r\n       * @param variantId - Variant ID (optional)\r\n       */\r\n      removeItem: (productId, variantId) => {\r\n        const items = get().items;\r\n        const itemKey = getItemKey(productId, variantId);\r\n        \r\n        const updatedItems = items.filter((item) => {\r\n          const existingKey = getItemKey(item.product.id, item.variant?.id);\r\n          return existingKey !== itemKey;\r\n        });\r\n        \r\n        set({ items: updatedItems });\r\n      },\r\n      \r\n      /**\r\n       * Update quantity of an existing item\r\n       * If quantity is 0 or negative, removes the item\r\n       * \r\n       * @param productId - Product ID\r\n       * @param quantity - New quantity\r\n       * @param variantId - Variant ID (optional)\r\n       */\r\n      updateQuantity: (productId, quantity, variantId) => {\r\n        const items = get().items;\r\n        const itemKey = getItemKey(productId, variantId);\r\n        \r\n        if (quantity <= 0) {\r\n          // Remove item if quantity is 0 or negative\r\n          get().removeItem(productId, variantId);\r\n          return;\r\n        }\r\n        \r\n        const updatedItems = items.map((item) => {\r\n          const existingKey = getItemKey(item.product.id, item.variant?.id);\r\n          \r\n          if (existingKey === itemKey) {\r\n            return { ...item, quantity };\r\n          }\r\n          \r\n          return item;\r\n        });\r\n        \r\n        set({ items: updatedItems });\r\n      },\r\n      \r\n      /**\r\n       * Clear all items from cart\r\n       * Used after successful checkout\r\n       */\r\n      clearCart: () => {\r\n        set({ items: [] });\r\n      },\r\n      \r\n      // ============================================================================\r\n      // COMPUTED GETTERS\r\n      // ============================================================================\r\n      \r\n      /**\r\n       * Get total number of items in cart (sum of quantities)\r\n       */\r\n      getTotalItems: () => {\r\n        const items = get().items;\r\n        return items.reduce((total, item) => total + item.quantity, 0);\r\n      },\r\n      \r\n      /**\r\n       * Calculate cart subtotal (before shipping/tax)\r\n       */\r\n      getSubtotal: () => {\r\n        const items = get().items;\r\n        \r\n        return items.reduce((total, item) => {\r\n          const price = getItemPrice(item.product, item.variant);\r\n          return total + (price * item.quantity);\r\n        }, 0);\r\n      },\r\n      \r\n      /**\r\n       * Get quantity of a specific item in cart\r\n       * Returns 0 if item not in cart\r\n       */\r\n      getItemCount: (productId, variantId) => {\r\n        const items = get().items;\r\n        const itemKey = getItemKey(productId, variantId);\r\n        \r\n        const item = items.find((item) => {\r\n          const existingKey = getItemKey(item.product.id, item.variant?.id);\r\n          return existingKey === itemKey;\r\n        });\r\n        \r\n        return item?.quantity || 0;\r\n      },\r\n      \r\n      /**\r\n       * Check if a specific item is in cart\r\n       */\r\n      hasItem: (productId, variantId) => {\r\n        return get().getItemCount(productId, variantId) > 0;\r\n      },\r\n    }),\r\n    \r\n    // ============================================================================\r\n    // PERSISTENCE CONFIGURATION\r\n    // ============================================================================\r\n    {\r\n      name: 'cart-storage', // localStorage key\r\n      storage: createJSONStorage(() => localStorage),\r\n      \r\n      /**\r\n       * Only persist items array\r\n       * Computed values are derived on-demand\r\n       */\r\n      partialize: (state) => ({\r\n        items: state.items,\r\n      }),\r\n    }\r\n  )\r\n);\r\n\r\n// ============================================================================\r\n// SELECTOR HOOKS (Performance Optimization)\r\n// ============================================================================\r\n\r\n/**\r\n * Hook to get only cart items\r\n * Prevents re-renders when other state changes\r\n */\r\nexport const useCartItems = () => useCartStore((state) => state.items);\r\n\r\n/**\r\n * Hook to get total item count\r\n */\r\nexport const useCartCount = () => {\r\n  const getTotalItems = useCartStore((state) => state.getTotalItems);\r\n  return getTotalItems();\r\n};\r\n\r\n/**\r\n * Hook to get cart subtotal\r\n */\r\nexport const useCartSubtotal = () => {\r\n  const getSubtotal = useCartStore((state) => state.getSubtotal);\r\n  return getSubtotal();\r\n};\r\n\r\n/**\r\n * Hook to get only cart actions (doesn't cause re-renders)\r\n */\r\nexport const useCartActions = () => useCartStore((state) => ({\r\n  addItem: state.addItem,\r\n  removeItem: state.removeItem,\r\n  updateQuantity: state.updateQuantity,\r\n  clearCart: state.clearCart,\r\n}));\r\n\r\n/**\r\n * Hook to check if specific product is in cart\r\n */\r\nexport const useIsInCart = (productId: string, variantId?: string): boolean => {\r\n  const hasItem = useCartStore((state) => state.hasItem);\r\n  return hasItem(productId, variantId);\r\n};\r\n\r\n/**\r\n * Hook to get quantity of specific product in cart\r\n */\r\nexport const useProductQuantity = (productId: string, variantId?: string): number => {\r\n  const getItemCount = useCartStore((state) => state.getItemCount);\r\n  return getItemCount(productId, variantId);\r\n};\r\n\r\n// ============================================================================\r\n// UTILITY FUNCTIONS\r\n// ============================================================================\r\n\r\n/**\r\n * Check if cart is empty\r\n */\r\nexport const useIsCartEmpty = (): boolean => {\r\n  const items = useCartItems();\r\n  return items.length === 0;\r\n};\r\n\r\n/**\r\n * Get all unique factories in cart\r\n * Useful for calculating per-factory shipping costs\r\n */\r\nexport const useCartFactories = (): string[] => {\r\n  const items = useCartItems();\r\n  const factoryIds = items.map((item) => item.product.factory_id);\r\n  return [...new Set(factoryIds)];\r\n};\r\n\r\n/**\r\n * Check if all items in cart are from same factory\r\n * Some features might require single-factory orders\r\n */\r\nexport const useIsSingleFactoryCart = (): boolean => {\r\n  const factories = useCartFactories();\r\n  return factories.length <= 1;\r\n};\r\n\r\n/**\r\n * Get items grouped by factory\r\n * Useful for split shipments\r\n */\r\nexport const useCartItemsByFactory = (): Record<string, CartItem[]> => {\r\n  const items = useCartItems();\r\n  \r\n  return items.reduce((grouped, item) => {\r\n    const factoryId = item.product.factory_id;\r\n    \r\n    if (!grouped[factoryId]) {\r\n      grouped[factoryId] = [];\r\n    }\r\n    \r\n    grouped[factoryId].push(item);\r\n    \r\n    return grouped;\r\n  }, {} as Record<string, CartItem[]>);\r\n};\r\n\r\n/**\r\n * Check if cart contains any group buying items\r\n */\r\nexport const useHasGroupBuyingItems = (): boolean => {\r\n  const items = useCartItems();\r\n  return items.some((item) => item.group_session !== undefined);\r\n};\r\n\r\n/**\r\n * Validate cart items before checkout\r\n * Returns array of validation errors\r\n */\r\nexport const useValidateCart = (): string[] => {\r\n  const items = useCartItems();\r\n  const errors: string[] = [];\r\n  \r\n  if (items.length === 0) {\r\n    errors.push('Keranjang kosong');\r\n    return errors;\r\n  }\r\n  \r\n  // Check each item\r\n  items.forEach((item) => {\r\n    // Check stock availability\r\n    if (item.product.status !== 'active') {\r\n      errors.push(`${item.product.name} tidak tersedia`);\r\n    }\r\n    \r\n    // Check variant stock if applicable\r\n    if (item.variant && !item.variant.is_active) {\r\n      errors.push(`${item.product.name} - ${item.variant.variant_name} tidak tersedia`);\r\n    }\r\n    \r\n    // Check MOQ for group buying\r\n    if (item.group_session) {\r\n      if (item.quantity < item.product.min_order_quantity) {\r\n        errors.push(\r\n          `${item.product.name} membutuhkan minimal ${item.product.min_order_quantity} unit`\r\n        );\r\n      }\r\n    }\r\n  });\r\n  \r\n  return errors;\r\n};\r\n\r\n// ============================================================================\r\n// EXPORT DEFAULT STORE\r\n// ============================================================================\r\n\r\nexport default useCartStore;\r\n\r\n// ============================================================================\r\n// USAGE EXAMPLES\r\n// ============================================================================\r\n\r\n/**\r\n * Example 1: Add product to cart from product page\r\n * \r\n * import { useCartActions } from '@/lib/store/cart.store';\r\n * \r\n * function ProductPage({ product, activeSession }) {\r\n *   const { addItem } = useCartActions();\r\n *   const [quantity, setQuantity] = useState(1);\r\n *   \r\n *   const handleAddToCart = () => {\r\n *     addItem(product, quantity, undefined, activeSession);\r\n *     toast.success('Produk ditambahkan ke keranjang!');\r\n *   };\r\n *   \r\n *   return (\r\n *     <button onClick={handleAddToCart}>\r\n *       Tambah ke Keranjang\r\n *     </button>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 2: Display cart count in header\r\n * \r\n * import { useCartCount } from '@/lib/store/cart.store';\r\n * \r\n * function CartBadge() {\r\n *   const count = useCartCount();\r\n *   \r\n *   if (count === 0) return null;\r\n *   \r\n *   return (\r\n *     <div className=\"relative\">\r\n *       <ShoppingCartIcon />\r\n *       <span className=\"absolute -top-2 -right-2\">\r\n *         {count}\r\n *       </span>\r\n *     </div>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 3: Cart page with item management\r\n * \r\n * import { useCartItems, useCartActions, useCartSubtotal } from '@/lib/store/cart.store';\r\n * \r\n * function CartPage() {\r\n *   const items = useCartItems();\r\n *   const { updateQuantity, removeItem } = useCartActions();\r\n *   const subtotal = useCartSubtotal();\r\n *   \r\n *   return (\r\n *     <div>\r\n *       {items.map((item) => (\r\n *         <div key={item.product.id}>\r\n *           <h3>{item.product.name}</h3>\r\n *           <input\r\n *             type=\"number\"\r\n *             value={item.quantity}\r\n *             onChange={(e) => updateQuantity(\r\n *               item.product.id,\r\n *               parseInt(e.target.value),\r\n *               item.variant?.id\r\n *             )}\r\n *           />\r\n *           <button onClick={() => removeItem(item.product.id, item.variant?.id)}>\r\n *             Hapus\r\n *           </button>\r\n *         </div>\r\n *       ))}\r\n *       <div>Subtotal: Rp {subtotal.toLocaleString()}</div>\r\n *     </div>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 4: Checkout - validate and clear cart\r\n * \r\n * import { useValidateCart, useCartActions } from '@/lib/store/cart.store';\r\n * import { useRouter } from 'next/navigation';\r\n * \r\n * function CheckoutButton() {\r\n *   const errors = useValidateCart();\r\n *   const { clearCart } = useCartActions();\r\n *   const router = useRouter();\r\n *   \r\n *   const handleCheckout = async () => {\r\n *     if (errors.length > 0) {\r\n *       errors.forEach(error => toast.error(error));\r\n *       return;\r\n *     }\r\n *     \r\n *     // Process checkout...\r\n *     const success = await processOrder();\r\n *     \r\n *     if (success) {\r\n *       clearCart();\r\n *       router.push('/order-success');\r\n *     }\r\n *   };\r\n *   \r\n *   return (\r\n *     <button onClick={handleCheckout}>\r\n *       Lanjut ke Pembayaran\r\n *     </button>\r\n *   );\r\n * }\r\n */\r\n\r\n/**\r\n * Example 5: Check if product is in cart\r\n * \r\n * import { useIsInCart, useProductQuantity } from '@/lib/store/cart.store';\r\n * \r\n * function ProductCard({ product }) {\r\n *   const isInCart = useIsInCart(product.id);\r\n *   const quantity = useProductQuantity(product.id);\r\n *   \r\n *   return (\r\n *     <div>\r\n *       {isInCart ? (\r\n *         <span>Sudah di keranjang ({quantity})</span>\r\n *       ) : (\r\n *         <button>Tambah ke Keranjang</button>\r\n *       )}\r\n *     </div>\r\n *   );\r\n * }\r\n */"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 758, "column": 4}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 762, "column": 0}, "map": {"version":3,"sources":["file:///C:/ecommerce/ecommerceMVP/apps/customer-web/components/layout/mobile-header.tsx"],"sourcesContent":["'use client';\r\n\r\nimport Link from 'next/link';\r\nimport { useState } from 'react';\r\nimport { useCartCount } from '@/lib/store/cart.store';\r\n\r\n// ============================================================================\r\n// MOBILE HEADER - Pinduoduo style\r\n// ============================================================================\r\n\r\nexport function MobileHeader() {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const cartCount = useCartCount();\r\n\r\n  return (\r\n    <header className=\"sticky top-0 z-50 bg-white border-b border-gray-200\">\r\n      {/* Search Bar */}\r\n      <div className=\"flex items-center gap-3 px-3 py-2\">\r\n        {/* Logo */}\r\n        <Link href=\"/\" className=\"flex-shrink-0\">\r\n          <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-red-500 to-orange-500 flex items-center justify-center text-white font-bold text-sm\">\r\n            BB\r\n          </div>\r\n        </Link>\r\n\r\n        {/* Search Input */}\r\n        <div className=\"flex-1 relative\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"搜索商品 (Cari Batik...)\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"w-full h-9 pl-9 pr-3 rounded-full bg-gray-100 text-sm focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n          />\r\n          <svg\r\n            className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n            />\r\n          </svg>\r\n        </div>\r\n\r\n        {/* Cart Icon */}\r\n        <Link href=\"/cart\" className=\"relative flex-shrink-0\">\r\n          <svg\r\n            className=\"w-6 h-6 text-gray-700\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\"\r\n            />\r\n          </svg>\r\n          {cartCount > 0 && (\r\n            <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center\">\r\n              {cartCount > 99 ? '99+' : cartCount}\r\n            </span>\r\n          )}\r\n        </Link>\r\n      </div>\r\n\r\n      {/* Category Tabs - Horizontal Scroll */}\r\n      <CategoryTabs />\r\n    </header>\r\n  );\r\n}\r\n\r\n// ============================================================================\r\n// CATEGORY TABS\r\n// ============================================================================\r\n\r\nfunction CategoryTabs() {\r\n  const categories = [\r\n    { id: 'all', name: '物品', icon: '🏠' },\r\n    { id: 'new', name: '推荐', icon: '⭐' },\r\n    { id: 'tulis', name: '手写', icon: '✍️' },\r\n    { id: 'cap', name: '印章', icon: '🏷️' },\r\n    { id: 'group', name: '团购', icon: '👥' },\r\n    { id: 'sale', name: '特卖', icon: '🔥' },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"flex overflow-x-auto scrollbar-hide border-t border-gray-100\">\r\n      {categories.map((cat) => (\r\n        <Link\r\n          key={cat.id}\r\n          href={`/categories/${cat.id}`}\r\n          className=\"flex-shrink-0 flex flex-col items-center gap-1 px-4 py-2 min-w-[60px]\"\r\n        >\r\n          <span className=\"text-xl\">{cat.icon}</span>\r\n          <span className=\"text-xs text-gray-700 whitespace-nowrap\">\r\n            {cat.name}\r\n          </span>\r\n        </Link>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Hide scrollbar\r\nconst styles = `\r\n.scrollbar-hide::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n.scrollbar-hide {\r\n  -ms-overflow-style: none;\r\n  scrollbar-width: none;\r\n}\r\n`;\r\n\r\nif (typeof document !== 'undefined') {\r\n  const styleSheet = document.createElement('style');\r\n  styleSheet.textContent = styles;\r\n  document.head.appendChild(styleSheet);\r\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAJA;;;;;AAUO,SAAS;IACd,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,gVAAQ,EAAC;IAC/C,MAAM,YAAY,IAAA,wKAAY;IAE9B,qBACE,6WAAC;QAAO,WAAU;;0BAEhB,6WAAC;gBAAI,WAAU;;kCAEb,6WAAC,sSAAI;wBAAC,MAAK;wBAAI,WAAU;kCACvB,cAAA,6WAAC;4BAAI,WAAU;sCAAkI;;;;;;;;;;;kCAMnJ,6WAAC;wBAAI,WAAU;;0CACb,6WAAC;gCACC,MAAK;gCACL,aAAY;gCACZ,OAAO;gCACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;gCAC9C,WAAU;;;;;;0CAEZ,6WAAC;gCACC,WAAU;gCACV,MAAK;gCACL,QAAO;gCACP,SAAQ;0CAER,cAAA,6WAAC;oCACC,eAAc;oCACd,gBAAe;oCACf,aAAa;oCACb,GAAE;;;;;;;;;;;;;;;;;kCAMR,6WAAC,sSAAI;wBAAC,MAAK;wBAAQ,WAAU;;0CAC3B,6WAAC;gCACC,WAAU;gCACV,MAAK;gCACL,QAAO;gCACP,SAAQ;0CAER,cAAA,6WAAC;oCACC,eAAc;oCACd,gBAAe;oCACf,aAAa;oCACb,GAAE;;;;;;;;;;;4BAGL,YAAY,mBACX,6WAAC;gCAAK,WAAU;0CACb,YAAY,KAAK,QAAQ;;;;;;;;;;;;;;;;;;0BAOlC,6WAAC;;;;;;;;;;;AAGP;AAEA,+EAA+E;AAC/E,gBAAgB;AAChB,+EAA+E;AAE/E,SAAS;IACP,MAAM,aAAa;QACjB;YAAE,IAAI;YAAO,MAAM;YAAM,MAAM;QAAK;QACpC;YAAE,IAAI;YAAO,MAAM;YAAM,MAAM;QAAI;QACnC;YAAE,IAAI;YAAS,MAAM;YAAM,MAAM;QAAK;QACtC;YAAE,IAAI;YAAO,MAAM;YAAM,MAAM;QAAM;QACrC;YAAE,IAAI;YAAS,MAAM;YAAM,MAAM;QAAK;QACtC;YAAE,IAAI;YAAQ,MAAM;YAAM,MAAM;QAAK;KACtC;IAED,qBACE,6WAAC;QAAI,WAAU;kBACZ,WAAW,GAAG,CAAC,CAAC,oBACf,6WAAC,sSAAI;gBAEH,MAAM,CAAC,YAAY,EAAE,IAAI,EAAE,EAAE;gBAC7B,WAAU;;kCAEV,6WAAC;wBAAK,WAAU;kCAAW,IAAI,IAAI;;;;;;kCACnC,6WAAC;wBAAK,WAAU;kCACb,IAAI,IAAI;;;;;;;eANN,IAAI,EAAE;;;;;;;;;;AAYrB;AAEA,iBAAiB;AACjB,MAAM,SAAS,CAAC;;;;;;;;AAQhB,CAAC;AAED,IAAI,OAAO,aAAa,aAAa;IACnC,MAAM,aAAa,SAAS,aAAa,CAAC;IAC1C,WAAW,WAAW,GAAG;IACzB,SAAS,IAAI,CAAC,WAAW,CAAC;AAC5B","debugId":null}},
    {"offset": {"line": 985, "column": 0}, "map": {"version":3,"sources":["file:///C:/ecommerce/ecommerceMVP/apps/customer-web/lib/utils.ts"],"sourcesContent":["// lib/utils.ts\r\nimport { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\n// ============================================\r\n// FUNCTION 1: Combine CSS classes\r\n// ============================================\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\n// ============================================\r\n// FUNCTION 2: Format Indonesian Rupiah\r\n// ============================================\r\nexport function formatRupiah(amount: number): string {\r\n  return new Intl.NumberFormat('id-ID', {\r\n    style: 'currency',\r\n    currency: 'IDR',\r\n    minimumFractionDigits: 0,\r\n  }).format(amount);\r\n}\r\n\r\n// ============================================\r\n// FUNCTION 3: Format countdown timer\r\n// ============================================\r\nexport function formatTimeRemaining(seconds: number): string {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const secs = seconds % 60;\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}j ${minutes}m`;  // j = jam (hours)\r\n  }\r\n  if (minutes > 0) {\r\n    return `${minutes}m ${secs}d`;   // d = detik (seconds)\r\n  }\r\n  return `${secs}d`;\r\n}\r\n\r\n// ============================================\r\n// FUNCTION 4: Format dates in Indonesian\r\n// ============================================\r\nexport function formatIndonesianDate(date: Date): string {\r\n  return new Intl.DateTimeFormat('id-ID', {\r\n    dateStyle: 'long',\r\n  }).format(date);\r\n}"],"names":[],"mappings":"AAAA,eAAe;;;;;;;;;;;AACf;AACA;;;AAKO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,oOAAO,EAAC,IAAA,8LAAI,EAAC;AACtB;AAKO,SAAS,aAAa,MAAc;IACzC,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,OAAO;QACP,UAAU;QACV,uBAAuB;IACzB,GAAG,MAAM,CAAC;AACZ;AAKO,SAAS,oBAAoB,OAAe;IACjD,MAAM,QAAQ,KAAK,KAAK,CAAC,UAAU;IACnC,MAAM,UAAU,KAAK,KAAK,CAAC,AAAC,UAAU,OAAQ;IAC9C,MAAM,OAAO,UAAU;IAEvB,IAAI,QAAQ,GAAG;QACb,OAAO,GAAG,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC,EAAG,kBAAkB;IACrD;IACA,IAAI,UAAU,GAAG;QACf,OAAO,GAAG,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC,EAAI,sBAAsB;IACzD;IACA,OAAO,GAAG,KAAK,CAAC,CAAC;AACnB;AAKO,SAAS,qBAAqB,IAAU;IAC7C,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;QACtC,WAAW;IACb,GAAG,MAAM,CAAC;AACZ","debugId":null}},
    {"offset": {"line": 1031, "column": 0}, "map": {"version":3,"sources":["file:///C:/ecommerce/ecommerceMVP/apps/customer-web/components/layout/mobile-bottom-nav.tsx"],"sourcesContent":["'use client';\r\n\r\nimport Link from 'next/link';\r\nimport { usePathname } from 'next/navigation';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// ============================================================================\r\n// MOBILE BOTTOM NAVIGATION - Pinduoduo style\r\n// ============================================================================\r\n\r\nexport function MobileBottomNav() {\r\n  const pathname = usePathname();\r\n\r\n  const navItems = [\r\n    {\r\n      href: '/',\r\n      label: '首页',\r\n      icon: (active: boolean) => (\r\n        <svg\r\n          className={cn('w-6 h-6', active ? 'text-red-500' : 'text-gray-600')}\r\n          fill={active ? 'currentColor' : 'none'}\r\n          stroke={active ? 'none' : 'currentColor'}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      href: '/group-buying',\r\n      label: '团购',\r\n      badge: 'HOT',\r\n      icon: (active: boolean) => (\r\n        <svg\r\n          className={cn('w-6 h-6', active ? 'text-red-500' : 'text-gray-600')}\r\n          fill={active ? 'currentColor' : 'none'}\r\n          stroke={active ? 'none' : 'currentColor'}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      href: '/orders',\r\n      label: '订单',\r\n      icon: (active: boolean) => (\r\n        <svg\r\n          className={cn('w-6 h-6', active ? 'text-red-500' : 'text-gray-600')}\r\n          fill={active ? 'currentColor' : 'none'}\r\n          stroke={active ? 'none' : 'currentColor'}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n    {\r\n      href: '/profile',\r\n      label: '我的',\r\n      icon: (active: boolean) => (\r\n        <svg\r\n          className={cn('w-6 h-6', active ? 'text-red-500' : 'text-gray-600')}\r\n          fill={active ? 'currentColor' : 'none'}\r\n          stroke={active ? 'none' : 'currentColor'}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\r\n          />\r\n        </svg>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <nav className=\"fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 safe-area-pb\">\r\n      <div className=\"flex items-center justify-around h-16\">\r\n        {navItems.map((item) => {\r\n          const isActive = pathname === item.href;\r\n          \r\n          return (\r\n            <Link\r\n              key={item.href}\r\n              href={item.href}\r\n              className=\"flex flex-col items-center justify-center flex-1 h-full relative\"\r\n            >\r\n              {/* Badge */}\r\n              {item.badge && (\r\n                <span className=\"absolute top-1 right-1/4 bg-red-500 text-white text-[10px] font-bold px-1.5 py-0.5 rounded-full\">\r\n                  {item.badge}\r\n                </span>\r\n              )}\r\n              \r\n              {/* Icon */}\r\n              <div className=\"mb-0.5\">\r\n                {item.icon(isActive)}\r\n              </div>\r\n              \r\n              {/* Label */}\r\n              <span\r\n                className={cn(\r\n                  'text-xs font-medium',\r\n                  isActive ? 'text-red-500' : 'text-gray-600'\r\n                )}\r\n              >\r\n                {item.label}\r\n              </span>\r\n            </Link>\r\n          );\r\n        })}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// Add safe area padding for iOS devices\r\nconst styles = `\r\n.safe-area-pb {\r\n  padding-bottom: env(safe-area-inset-bottom);\r\n}\r\n`;\r\n\r\nif (typeof document !== 'undefined') {\r\n  const styleSheet = document.createElement('style');\r\n  styleSheet.textContent = styles;\r\n  document.head.appendChild(styleSheet);\r\n}"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAJA;;;;;AAUO,SAAS;IACd,MAAM,WAAW,IAAA,gRAAW;IAE5B,MAAM,WAAW;QACf;YACE,MAAM;YACN,OAAO;YACP,MAAM,CAAC,uBACL,6WAAC;oBACC,WAAW,IAAA,6IAAE,EAAC,WAAW,SAAS,iBAAiB;oBACnD,MAAM,SAAS,iBAAiB;oBAChC,QAAQ,SAAS,SAAS;oBAC1B,SAAQ;8BAER,cAAA,6WAAC;wBACC,eAAc;wBACd,gBAAe;wBACf,aAAa;wBACb,GAAE;;;;;;;;;;;QAIV;QACA;YACE,MAAM;YACN,OAAO;YACP,OAAO;YACP,MAAM,CAAC,uBACL,6WAAC;oBACC,WAAW,IAAA,6IAAE,EAAC,WAAW,SAAS,iBAAiB;oBACnD,MAAM,SAAS,iBAAiB;oBAChC,QAAQ,SAAS,SAAS;oBAC1B,SAAQ;8BAER,cAAA,6WAAC;wBACC,eAAc;wBACd,gBAAe;wBACf,aAAa;wBACb,GAAE;;;;;;;;;;;QAIV;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM,CAAC,uBACL,6WAAC;oBACC,WAAW,IAAA,6IAAE,EAAC,WAAW,SAAS,iBAAiB;oBACnD,MAAM,SAAS,iBAAiB;oBAChC,QAAQ,SAAS,SAAS;oBAC1B,SAAQ;8BAER,cAAA,6WAAC;wBACC,eAAc;wBACd,gBAAe;wBACf,aAAa;wBACb,GAAE;;;;;;;;;;;QAIV;QACA;YACE,MAAM;YACN,OAAO;YACP,MAAM,CAAC,uBACL,6WAAC;oBACC,WAAW,IAAA,6IAAE,EAAC,WAAW,SAAS,iBAAiB;oBACnD,MAAM,SAAS,iBAAiB;oBAChC,QAAQ,SAAS,SAAS;oBAC1B,SAAQ;8BAER,cAAA,6WAAC;wBACC,eAAc;wBACd,gBAAe;wBACf,aAAa;wBACb,GAAE;;;;;;;;;;;QAIV;KACD;IAED,qBACE,6WAAC;QAAI,WAAU;kBACb,cAAA,6WAAC;YAAI,WAAU;sBACZ,SAAS,GAAG,CAAC,CAAC;gBACb,MAAM,WAAW,aAAa,KAAK,IAAI;gBAEvC,qBACE,6WAAC,sSAAI;oBAEH,MAAM,KAAK,IAAI;oBACf,WAAU;;wBAGT,KAAK,KAAK,kBACT,6WAAC;4BAAK,WAAU;sCACb,KAAK,KAAK;;;;;;sCAKf,6WAAC;4BAAI,WAAU;sCACZ,KAAK,IAAI,CAAC;;;;;;sCAIb,6WAAC;4BACC,WAAW,IAAA,6IAAE,EACX,uBACA,WAAW,iBAAiB;sCAG7B,KAAK,KAAK;;;;;;;mBAvBR,KAAK,IAAI;;;;;YA2BpB;;;;;;;;;;;AAIR;AAEA,wCAAwC;AACxC,MAAM,SAAS,CAAC;;;;AAIhB,CAAC;AAED,IAAI,OAAO,aAAa,aAAa;IACnC,MAAM,aAAa,SAAS,aAAa,CAAC;IAC1C,WAAW,WAAW,GAAG;IACzB,SAAS,IAAI,CAAC,WAAW,CAAC;AAC5B","debugId":null}}]
}